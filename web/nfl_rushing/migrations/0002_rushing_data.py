# Generated by Django 3.1.6 on 2021-02-15 00:05

from django.db import migrations
import os

import json

def insert_rushing_data(apps, schema_editor):
    # with open(os.path.dirname(__file__) + "/0003_data_file.csv", "r") as csvfile:
    with open(os.path.dirname(__file__) + '/0002_rushing.json') as f:
        data = json.load(f)

    NflPlayerRushing = apps.get_model('nfl_rushing', 'NflPlayerRushing')

    for player_json in data:
        create_player(player_json, NflPlayerRushing)

def create_player(player_json, NflPlayerRushing):
    # longest rush encoded as a string
    # if last character == 'T', means the longest rush resulted in a touchdown
    # in both cases, need to convert string to int
    longest_rush, longest_rush_touchdown = clean_longest_rush(player_json['Lng'])

    # create data model -- side effect of saving into database
    NflPlayerRushing.objects.create(
        name=player_json['Player'],
        team=player_json['Team'],
        position=player_json['Pos'],

        rushing_attempts=player_json['Att'],
        rushing_attempts_per_game=player_json['Att/G'],

        total_rushing_yards=clean_integer_data(player_json['Yds']),
        rushing_yards_per_attempt=player_json['Avg'],
        rushing_yards_per_game=player_json['Yds/G'],

        total_rushing_touchdowns=player_json['TD'],

        longest_rush=longest_rush,
        longest_rush_touchdown=longest_rush_touchdown,

        rush_first_downs=player_json['1st'],
        rush_first_down_percent=player_json['1st%'],

        rush_20_plus=player_json['20+'],
        rush_40_plus=player_json['40+'],

        rush_fumbles=player_json['FUM'],
    )

def clean_longest_rush(raw_longest_rush):
    if type(raw_longest_rush) == int:
        return raw_longest_rush, False

    if raw_longest_rush[-1] == 'T':
        longest_rush_touchdown = True
        longest_rush = clean_integer_data(raw_longest_rush[0:-1])
    else:
        longest_rush_touchdown = False
        longest_rush = clean_integer_data(raw_longest_rush)
    
    return longest_rush, longest_rush_touchdown


def clean_integer_data(potentially_string):
    if type(potentially_string) == int:
        return potentially_string

    # convert to integer and remove comma separators
    return int(potentially_string.replace(',', ''))

class Migration(migrations.Migration):

    dependencies = [
        ('nfl_rushing', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(insert_rushing_data),
    ]
